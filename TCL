To utilize program => tclsh
To execute => filename.tcl= tcl filename.sh=tclsh filename.tcl depending on a version tcl 8.6 or tclsh.86.exe.
Interpreter knows that tclsh = start interpreter, tcl version which automatically loads extention [in oop=extention 
method added to an object, other it's copied.] for GUI. 
Tclsh is a simple command line interactive interpreter= program which directly executes doesn't require them  previewously
have been compiled in machien language.
info commands => all commands

set==to substitue a value to a variable by variable value. The result of any command may be used as an argument to any other 
command.
In tcl there is no operator or command for trying concat [union of strings] which makes more interactive scripting, allows
to use more cumbersom predictable [ e.g. spaces in filenames does not cause difficulties]. Unlike the UNIX command shell 
does not replace any string unless explicitly directed to do so [one of the pointors of interactivity, makes predictable
that an empety lines also do not caus difficulties]. 
Command could be used as argument to any other command. There is nor operator or command for string concatenation as the 
language concats directly. 

Evaaluates text strings as an expression =>=> set 

	%set sum [expr 1+2+3] # Curly baraces make substitution faster as every variable has it's substitusion.With curly braces variable substitution is delayed untill call time [dynamic scoping]. 
	%
	%puts "sum of the numbers"
	%
	%set x 1
	%set sum [expr{$x+1+3}] 

$x is not substituted and expression is presaved, Puts $sum is substitutes for $x and expression is evaluated.Without 
braces substitution occurs at the definition site [lexical scoping.The basic construct [the command] and a set of somple
substitution rules, courly brace characters around them which suppresses all substitutions inside except backslashes.

Double-Quoted words 
 == 3 types of substitution accurs [once in single left to right scan through the words]
1. Command substitution => replaces square braces with the evaluating the script contained inside.
2. Variable substitution => replaces the $ by the name of a variable with the content of vat "$dd" replaced the value
"dd" with braces not to {} to delimit what is and isn't the variable name in otherwise ambigous cases.
3. Backslash substitution, substitude \+char. 8.5 any words may prefixed by {*} to cause that word to be split apart into 
it's construct sub-words in a purpose to build the command invocation.[[Unlike the UNIX command shell 
does not replace any string unless explicitly directed to do so [one of the pointors of interactivity, makes predictable
that an empety lines also do not caus difficulties]. 
Command could be used as argument to any other command. There is nor operator or command for string concatenation as the 
language concats directly.]]

Special place in the library allows and can be placed and replaced if so desired. Most of tcl especially in the standart
library are variadic and the proc [constructor for scriped command proc.deres] allows one to define default values for
unspecified arguments and a catch all arguments to allow the code to process arbitary numbers of arguments.

Tcl is not statically typed each var may contain int, float, lists, commands name [interactive] dictionalry...
Variables are reinterprated as other types of demand as values and operations that appeat to change them, actually just returns 
new value... immutable cannot be modified after it is created as values or immutable  [subjects to syntactic constraints].

For shortcut fo initializing the control variable condition [ as immutable] and additional "next" iterations statement [command
executed after executing the body]

Looping

Looping commands can be additionally controlled by these commands
Break =>    interrupts the body execution and returns from the looping command.
Continue => interrupts the body execution but the control is still given back to the looping command.
	for while => loop again 
	foreach => next itteration
Return =>   interrupts execution of the current body independent of the dipness of the procedure boundary and returns the given 
to the calllerrrr

There's no distinction between commands [in other languages known as 'functions'] ans syntax. No received words[like if and while]
TCL interpreter starts up there is a list of known commands which interpretter uses to parse a line. TCL commands that obey the same
syntax roules as all tcl commands and those are created by programmer with the proc command which is able to create new command.
This happens this way. As the proc is evaluated, it creates a new command name which makes argumets with a given name. As the 
procedure called, it returns the code contained in body.Arguments == list of arguments which will be passed to name. Name is 
invoked, local variables with these names will be created and the values passed to name are copied to the local variables. 
Value which body of a proc is able to be defined with return command [returns its argument to the callin program]. In case of
absentance of return,  => the body will return the caller when last command executed. The return value of procedure==the return
value of the last cmmand.

	% proc sub {arg args} {
	%	set x [expr {$arg- $args}];
	%	return $x
	% }
	% puts "The sub is: [name 6 6]\n\n"
	%
	% proc for {i j k} {
	%	puts "fo
	%	puts "Arguments: $a\n$b\n$c\n" 
	% }
	% for {set i 0} {$i < 10} {incr i}

So new command <<sub>> takes arg and args,runs the body. <<arg>> & <<args>> == list of arguments which would be passed to <<sub>>
and as <<sub>> envoked local variables are created, will be passed to <<sub>> copied to local variables [variables which are created
ouside the function and are accesssed [==used] on any function in the program. Are declared inside the function are able to be used only 
inside the function, permited having the same variable with the same name inside different functions].

A tcl evaluates variables by the scope of proc, namespaces, and at the topmost level, the global scope => the scope in which a variable
will be evaluated is able to be changed with <<global>>[which will allow a variable in a local scope [inside the proc] to refer to the
global variable[variable with golbal scoe => is visible & accessible everywhere in the program unless it's shadowed] of that name & 
<<upvar>>[similar ro global - tights thevariable to the current scope to the variable in the diff. scope.] commands.
Variables are encounterable through the others' tcl code wich is the part of the namespace system*.
Variables which are not used anymore, s.t. go "out of scope" at the end of procedure, are automatically cleaned up, for which tcl uses 
<<reference counting>>, and are possible remove explictly using <<unset>> command.

upvar ?level?otherVarN ?currentVarN?

Makes myVarN th and otherVarN the reference each other at the declared level relative to the current proc. . Levels could be mentioned 
using numbers[=>many levels up the stack from the current level]] or # [references that may levels down from the golbal scope].

List is just a collection of stuff. Even the set commands in tcl are just lists. The first list entery is the name of proc, arguments
of proc - subsequent members of list. An idividual list member is accessed with <<lindex>> command.

	% set listName {{member1}{member2}}
	% set listName [split "member1.member2] #splits string into the list.If there are more characters to split=>each will used individually.
	% set listName [list "member1""member2"]
Item in list is iterated through using the foreach command, which makes avilable a variable from multible lists
	
	%foreach a $listA b $listB {...} 
cool

To add and delet list members.

	% concat ?arg0?arg1?argN?  # all args in a single list, where arg is and individual element or another list.
	% lapend listName ?args?   # appends to the list as individual element.
	% linsert listName index ?args? # returns new list with new elements, but, before the mentioned element index. Each of them seperate elements.
	% lreplace listName fist last ?arg...argN? # returns new list with N element with replaced given arguments.inequal lists => lappended.
	% lset varName index newValue # is used to set elements of a list directly instead of lreplace.

Lists are good data structure for arbitrary number of things [array inecis are accessble to index randomly, lists - find n-th one through the pattern of previouse 
indices.]  

	% lsearch list pattern # searches list that matches pattern
	% lsort list # returns a new list[instead of sorting the list in place] in the stored order, by default, alphabetic order.
	% lrange list first last # returns a list composed of the firsth through the last entries in the list.If  first is > last => empety list is returned, else if grater than the number of elements => ends.

Lsearch uses "globbing"[used in Unix shell]  method of finding a match.  
	
	*  => matches any char
	?  => matches one occurrence of any char
	\X => <<\>> escapes any special char
	[...] => match any occurrance of any char with the brackets [could be matched using the range inside the braces].
<<glob>> command => glob pattern matching which returns a list of the matching files.

Tcl commands have subcommands. E.g. for <<string>> command the first argument is treated as a subcommand,also the following ones:

	% string lenth strin 			# returns the length of string
	% string index strin  index      	# returns index-th char from string
	% string range string first last 	# returns strinc created with chars from firs to last

6 string subcommands which make pattern and string matching, works slower than regexp and less powerfull than regexp

	% string compare string1 string2	# -1 if string less, 1 if grater than 0 if equal done alphabetically, not numerically
	% string first string1 strin2		# returns the index of character in string 1 if [exists in string2] which starts the first match 
							to the string 2. -1 if no match
	% string last string1 string2		# returns the index of the character in string1 that starts the first match to string2 or -1 if no 
	% string wordend string index		# returns index of the character after last one in the word which contains the given index'th character
						  character of string. where the word is set of chars, underscores... 
	% string wordstart string index		# returns the index of the first character in the word that contains the index'th character of string.
	% string match pattern string		# returns 1 if the pattern matches string. pattern == glob style pattern

String modification

	% string follower string		# returns string with all the letters converted from upper to lower case
	% string toupper string			# all letters converted from lower to upper case 
	% string trim string ?trimchars?	# returns string with all occurrences of given trimchars removed from both sides which are 
						  whitespaces[tabs, newlines, spaces] by default 
	% string trimleft string ?trimchars?	# with all accurances of given trimchars removed from the left.
	% string trimleft string ?trimchars?
	% format "formatstring" ?arg1...argn?	# returns the string formated in the same manner as the ANSI sprintf procedure. "formatstring"
						  describtion of the formating. contains of literal words, backslash sequences, and % files [strings
						  which start % and end 
					 	s --- Data == string
						d --- Data == decimal integer
						x --- Data == hexidecimal integer
						o --- Data == octal
						f --- Data is floating point number
					
						- align data lef
						+ align data right

Regular [rational] expressions - string operations, sequence of characters that define a search pattern which is used by string
search algorithms for find or find and replace operations on string. [Stephen Cloe Kleene]
Searches "string" for the regular expression "ex" if parameter "var" is given, then matched substring is copied to "var". 

	 
	% regexp ?switches? ex string ? var? submatch1...submatchn? // left to right
	% regsub ?switches? ex string replace name // which searches the string for the substrings in the string and replaces with replace.
the result copied into name.

^ == matches the begining of a string
$ == matches end of the string
* == any single char
+ == any count,at least previous char
[] == any char of a set of chars
[^ ] == any char which is not a number of the chars the ^
() == groups a set of chars in replace

Regular exoressions are simular to globing but diff is the way that matched chars are handled, matches any quantity any character.
Regexp parsing includes a method to select any chat not in a set, will match any char, not in the set of chars matched in the variable.
As the match is found enclosed parentheses.
Regsub copies the content to new variable substituting the matched chars.
The argument, regsub, regexp are processed by the substitution pass => expression should be enclosed in braces not to 
process any special one.

Looping associative array non specifying elements => array name & array get commands both selects nececarry elements
in a given pattern. Arrays are collections of variables [not values] which doesn't have a value => instead giving the value
input the [name] via upvarr cmmand, also for changes original array to a loal variable.

Disadvantages - cannot passed directly to a procedure as a value instead use array get & array set - converts to a value
and back, upvar - creates alias of the array.
- multidimentional arrays  [ index consists of more than 2 parts] emulated with one idmentional
 array set array (key) 45.
-arrays cannot be included in other data structures s.t. lists, sent over communications channel, non convertin into stringvalue.
[dict] command, dictionaries are pure [are pushed to procedure just as a list of string] values, are provided as efficient 
access to key value pairs ,like Tcl lists just they act like mapping for key values not an ordered sequence.
dictionaries are able to be nested so the value for particular key consists of another dictionary allows to build complicated 
data structure s.t. hierarchical databases. also could be combined dictionaries with other tcl data structures , building lists
of dictionaries that themselves contain lists.

File Access

Read [gets and puts, [read](to load an entire file then parse into lines with [split]])/Write files on disk. comunicates over sockets
and pipes. also with virtual file system to use them stored in memory not on disk.Uniform interface which diff resources, do not need 
details.

% open filename? access? permition?

access modes
	- r  open the file reading which already exists.
	- r+ read/write. file exists.
	- w  writing. ok if doesn't exists, if exists => set length to sero
	- w+ read/write. ok if file doesn't exists, if exists => set length to zero
	- a open for writing. must exist set current location immutable
	- a+ open for writhing. creates new file sets current location immutable

Permition - integer . the default is rw-rw-rw- (0666)   

% close fiileID		#close opened file with open, flushes any remaining output.

% gets fileID ?varname? #reads a line of input from fileID discarts the terminating newline.
varname == argument from fileID, discards the terminating newline. returns number of characters read [=1 if EOF[end of the file] occurs] places
the line of input in varname
varname is not specified => returns line of input. 
Empety string returned if
- balnk line file.
-  current location is at EOF.

% puts ?-nonewline ?fileID? string	# writes the chars in string referenced by fileID which is not
	- the value returned by previous call to open with write access
	- stdout
	- stderr

